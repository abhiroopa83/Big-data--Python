## Python OOP Assignment
Q1. What is the purpose of Python's OOP?

OOPS is a programming paradigm that uses objects and classes in programming. It aims to implement real-world entities like inheritance, polymorphisms, encapsulation, etc. in the programming

Q2. Where does an inheritance search look for an attribute?

An inheritance search looks for an attribute first in the instance object, then in the class the instance was created from, then in all higher superclasses, progressing from left to right (by default).

Q3. How do you distinguish between a class object and an instance object?

when we create a class in python then a class object is created so whenever python finds a class statement in the program then it creates a class object and assigns a name to that object i.e. class name.
when we call a class, it creates an instance object of that class from which the object has been created.

Q4. What makes the first argument in a class’s method function special?

A class method has a class object passed as its first argument. 

Q5. What is the purpose of the init method?

The __init__ method lets the class initialize the object's attributes and serves no other purpose. It is only used within classes.

Q6. What is the process for creating a class instance?

To create instances of a class, we can call the class using class name and pass in whatever arguments its __init__ method accepts.

Q7. What is the process for creating a class?

To create a class, use the keyword class like below:

class MyClass:
  x = 5

Q8. How would you define the superclasses of a class?

A superclass is the class from which many subclasses can be created. The subclasses inherit the characteristics of a superclass. The superclass is also known as the parent class or base class.

Q9. What is the relationship between classes and modules?

A class can be implemented in one or more . py files (modules). But often, we can organize a set of variables and functions into a class definition or just simply put them in a . py file and call it a module.

Q10. How do you make instances of classes?

To create instances of a class, you call the class using class name and pass in whatever arguments its __init__ method accepts

Q11. Where and how should be class attributes created?

Class attributes are attributes which are owned by the class itself. They will be shared by all the instances of the class. Therefore they have the same value for every instance. We define class attributes outside all the methods, usually they are placed at the top, right below the class header

Q12. Where and how are instance attributes created?

Instance attributes are defined in the __init__() function

Q13. What does the term "self" in a Python class mean?

The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.

Q14. How does a Python class handle operator overloading?

The operator overloading provide extended meaning beyond their predefined operational meaning. Such as, we use the "+" operator for adding two integers as well as joining two strings or merging two lists. We can achieve this as the "+" operator is overloaded by the "int" class and "str" class.

Q15. When do you consider allowing operator overloading of your classes?

Q16. What is the most popular form of operator overloading?

A very popular form of operator overloading is the Addition (+) operator. As '+' operator operates on two numbers and the same operator operates on two strings. It performs “Addition” on numbers whereas it performs “Concatenation” on strings.

Q17. What are the two most important concepts to grasp in order to comprehend Python OOP code?

Both inheritance and polymorphism are fundamental concepts of object oriented programming. These concepts help us to create code that can be extended and easily maintainable

Q18. Describe three applications for exception processing.

Q19. What happens if you don't do something extra to treat an exception?

the program terminates abruptly and the code past the line that caused the exception will not get executed.

Q20. What are your options for recovering from an exception in your script?

we can provide a generic except clause, which handles any exception. After the except clause(s), we can include an else-clause. The code in the else-block executes if the code in the try: block does not raise an exception. The else-block is a good place for code that does not need the try: block's protection.

Q21. Describe two methods for triggering exceptions in your script.

Try – This method catches the exceptions raised by the program. 
Raise – Triggers an exception manually using custom exceptions.

Q22. Identify two methods for specifying actions to be executed at termination time, regardless of  
whether or not an exception exists.

Q23. What is the purpose of the try statement?

Try – This method catches the exceptions raised by the program.

Q24. What are the two most popular try statement variations?

Q25. What is the purpose of the raise statement?

Raise – Triggers an exception manually using custom exceptions.


Q26. What does the assert statement do, and what other statement is it like?

Python's assert statement allows us to write sanity checks in our code. These checks are known as assertions, and we can use them to test if certain assumptions remain true while we're developing our code. If any of our assertions turn false, then we have a bug in our code.

Q27. What is the purpose of the with/as argument, and what other statement is it like?

Q28. What are *args, **kwargs?

We use *args and **kwargs as an argument when we are unsure about the number of arguments to pass in the functions.
Python has *args which allow us to pass the variable number of non keyword arguments to function.
**kwargs, it allows us to pass the variable length of keyword arguments to the function.

Q29. How can I pass optional or keyword parameters from one function to another?

To pass optional or keyword parameters from one function to another, collect the arguments using the * and ** specifiers in the function’s parameter list 

Q30. What are Lambda Functions?

A lambda function is an anonymous function (i.e., defined without a name) that can take any number of arguments but, unlike normal functions, evaluates and returns only one expression

Q31. Explain Inheritance in Python with an example?

Inheritance relationship defines the classes that inherit from other classes as derived, subclass, or sub-type classes. Base class remains to be the source from which a subclass inherits. For example, you have a Base class of “Animal,” and a “Lion” is a Derived class. The inheritance will be Lion is an Animal.

Q32. Suppose class C inherits from classes A and B as class C(A,B).Classes A and B both have their own versions of method func(). If we call func() from an object of 
class C, which version gets invoked?

Q33. Which methods/functions do we use to determine the type of instance and inheritance?

Using isinstance() function, we can test whether an object/variable is an instance of the specified type or class such as int or list. In the case of inheritance, we can checks if the specified class is the parent class of an object

Q34.Explain the use of the 'nonlocal' keyword in Python.

The nonlocal keyword is used to work with variables inside nested functions, where the variable should not belong to the inner function. Use the keyword nonlocal to declare that the variable is not local.

Q35. What is the global keyword?

The global keyword is used to create global variables from a no-global scope, e.g. inside a function.
